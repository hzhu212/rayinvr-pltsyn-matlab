function gui_pltsyn(working_dir)
% rayinvr-pltsyn 的图形界面，实现交互式绘图。
% 本脚本依赖以下 Packages，请事先安装到 MATLAB 中：
%     1. GUI Layout Toolbox: https://www.mathworks.com/matlabcentral/fileexchange/47982-gui-layout-toolbox
%     2. Widgets Toolbox: https://www.mathworks.com/matlabcentral/fileexchange/66235-widgets-toolbox
%
% Usage:
% gui_pltsyn(working_dir)
% @param: working_dir: the directory that contains "plotdata.pltsyn.mat".(i.e. the *.in folder)

    % working_dir = 'D:\Archive\Research\rayinvr\rayinvr-data\examples\e3';
    if nargin < 1
        fprintf('Argument "working_dir" is required.\n');
        return;
    end

    data_name = 'plotdata.pltsyn.mat';
    data_path = fullfile(working_dir, data_name);
    if ~exist(data_path, 'file')
        fprintf([
            'The working_dir "%s" does not contain the plot-data file: "%s". '...
            'You should run "start_pltsyn" first to generate plot-data.\n'], ...
            working_dir, data_name);
    end


    obj = load_plotdata(data_path);
    % obj properties: labels, xtraces, data, xlabel, ylabel, xlim, ylim

    colors = {'r', 'g', 'b', 'c', 'm', 'y', [1,0.65,0], [0.5,0.2,0.9], [0.6,0.8,0.2], [0.4,0.2,0.2], [0.4,0.4,1]};
    enable_color = false;

    [xshots, raygroups] = get_raygroups_of_each_shot(obj.labels);
    gui = create_interface(xshots, raygroups, 'shot-', 'raygroup-');
    set_axes(gui, obj);


%% -----------------------------------------------------------------------------
function [obj] = load_plotdata(data_path)
% load_plotdata: load plotdata of pltsyn from .mat file generated by
% `pltsyn-matlab/fun_store_pltsyn_plt.m`
    load(data_path, 'obj');
end


%% -----------------------------------------------------------------------------
function [xshots, raygroups] = get_raygroups_of_each_shot(labels)
% get_raygroups_of_each_shot: split each label to xshot and ray-group code,
% and then group by xshot. e.g. labels={'2.00-3.2', '2.00-4.2', '3.00-3.2'},
% splited xshots={'2.00', '2.00', '3.00'}, splited ray-groups={'3.2', '4.2', '3.2'}.
% Then group by xshot: xshots={'2.00', '3.00'}, raygroups={{'3.2', '4.2'}, {'3.2'}}.

    labels = sort(labels);
    xshots_split = {};
    raygroups_split = {};
    for ii = 1:length(labels)
        tmp = strsplit(labels{ii}, '-');
        xshots_split{end+1} = tmp{1};
        raygroups_split{end+1} = tmp{2};
    end
    g = findgroups(xshots_split);
    xshots = unique(xshots_split);
    raygroups = splitapply(@(c) {c}, raygroups_split, g);
end


%% -----------------------------------------------------------------------------
function [gui] = create_interface(tree_branches, tree_nodes, branch_prefix, node_prefix)
% initialize interface
% tree_branches, tree_nodes, branch_prefix, node_prefix are used to create CheckboxTree widget.

    gui = struct();
    gui.window = figure(...
        'Name', 'GUI of rayinvr-pltsyn', ...
        'NumberTitle', 'off', ...
        'MenuBar', 'none', ...
        'ToolBar', 'figure' ...
        );

    % + File menu
    fileMenu = uimenu(gui.window, 'Label', 'File');
    uimenu(fileMenu, 'Label', 'Export Plot', 'Callback', @on_export_plot);
    % uimenu(fileMenu, 'Label', 'Change Working Directory', 'Callback', @on_change_working_dir);

    % + Help menu
    helpMenu = uimenu(gui.window, 'Label', 'Help');
    uimenu(helpMenu, 'Label', 'README', 'Callback', @on_readme);

    % Arrange the main interface
    mainLayout = uix.HBoxFlex('Parent', gui.window, 'Spacing', 3);

    % + Create the panels
    controlPanel = uix.BoxPanel('Parent', mainLayout, 'Title', 'Select Ray Groups');
    viewPanel = uix.BoxPanel('Parent', mainLayout, 'Title', 'Seismic View', 'Padding', 0);

    % + Adjust the main layout
    set(mainLayout, 'Widths', [200, -1]);

    % + Create the view
    gui.viewAxes = axes('Parent', uicontainer('Parent', viewPanel));
    % Minimize the margin of axes
    set(gui.viewAxes, 'LooseInset', get(gui.viewAxes, 'TightInset'));
    % Add context menu to plot area
    ctxmenu1 = uicontextmenu(gui.window);
    gui.viewAxes.UIContextMenu = ctxmenu1;
    uimenu(ctxmenu1, 'Label', 'Enable Color', 'Callback', @on_enable_color);
    uimenu(ctxmenu1, 'Label', 'Disable Color', 'Callback', @on_disable_color);

    % + Create the controls
    controlLayout = uix.VBox('Parent', controlPanel, 'Padding', 3, 'Spacing', 3);
    gui.checkboxTree = uiw.widget.CheckboxTree(...
        'Parent', controlLayout, ...
        'MouseClickedCallback', @on_mouse_clicked, ...
        'SelectionChangeFcn', @on_select_changed ...
        );
    gui.checkboxTree.Root.Name = 'Select All';
    for ii = 1:length(tree_branches)
        branch_id = tree_branches{ii};
        branch = uiw.widget.CheckboxTreeNode('Name', strcat(branch_prefix, branch_id), 'Parent', gui.checkboxTree.Root);
        branch.UserData = branch_id;
        branch_nodes = tree_nodes{ii};
        for jj = 1:length(branch_nodes)
            node_id = branch_nodes{jj};
            node = uiw.widget.CheckboxTreeNode('Name', strcat(node_prefix, node_id), 'Parent', branch);
            node.TooltipString = sprintf('Tick raygroups to plot.\n Select a raygroup to scale plots according to.');
            node_path = strcat(branch_id, '-', node_id);
            node.UserData = node_path;
        end
    end

    % context menu for checkboxTree
    ctxmenu2 = uicontextmenu(gui.window);
    gui.checkboxTree.UIContextMenu = ctxmenu2;
    uimenu(ctxmenu2, 'Label', 'Expand All', 'Callback', @on_expand_all);
    uimenu(ctxmenu2, 'Label', 'Collapse All', 'Callback', @on_collapse_all);

    % Scale by box
    scaleContainer = uix.VBox('Parent', controlLayout, 'Padding', 3, 'Spacing', 3);
    uicontrol('Style', 'text', 'Parent', scaleContainer, 'String', 'Scale By: ', 'HorizontalAlignment', 'left');
    gui.scaleEdit = uicontrol('Style', 'edit', 'Parent', scaleContainer, 'Enable', 'off', 'String', 'null', 'HorizontalAlignment', 'left');
    set(scaleContainer, 'Heights', [15, -1]);

    % Apply button
    applyButton = uicontrol(...
        'Style', 'PushButton', ...
        'Parent', controlLayout, ...
        'String', 'Apply', ...
        'TooltipString', sprintf('Tick raygroups to show or hide.\n Select one raygroup to scale seismic amplitude to.'), ...
        'Callback', @on_apply ...
        );
    set(controlLayout, 'Heights', [-1, 50, 30]); % Make the list fill the space
end


%% -----------------------------------------------------------------------------
function [] = set_axes(gui, obj)
% set_axes: initialize axes
    ax = gui.viewAxes;
    set(ax, 'XAxisLocation', 'top', 'YDir', 'reverse', 'FontName', 'Consolas');
    xlabel(ax, obj.xlabel, 'FontName', 'Consolas', 'FontSize', 11);
    ylabel(ax, obj.ylabel, 'FontName', 'Consolas', 'FontSize', 11);
    xlim(ax, obj.xlim);
    ylim(ax, obj.ylim);
    box on;
end


%% -----------------------------------------------------------------------------
function [] = redraw(gui, obj)
% redraw: redraw according to selected data

    % get all selected raygroups
    selected = {};
    checked = gui.checkboxTree.CheckedNodes;
    for ii = 1:length(checked)
        selected = [selected, fun_get_end_nodes(checked(ii))];
    end

    % plot selected raygroups
    fun_plot_raygroups(selected);
end

%% -----------------------------------------------------------------------------
function [res] = fun_get_end_nodes(node)
% get tree end nodes recursively.
    if isempty(node.Children)
        res = {node.UserData};
        return;
    end
    res = {};
    for ii = 1:length(node.Children)
        res = [res, fun_get_end_nodes(node.Children(ii))];
    end
end

%% -----------------------------------------------------------------------------
function [] = fun_plot_raygroups(raygroups)
% fun_plot_raygroups: plot raygroups
% @param: raygroups: a cell array containing ray group names. e.g. {'2.00-3.2', '2.00-4.2'}
    function [] = plot_raygroup(ax, data, xtraces, scaleby, name, color)
    % plot_raygroup: plot a single raygroup
        xinc = min(abs(diff(xtraces)));
        scale_rate = 1;
        if ~isempty(scaleby) && scaleby
            scale_rate = (xinc * 0.5) / abs(scaleby);
        end
        for ii = 1:length(data)
            xydata = data{ii};
            x = xydata(1, :);
            y = xydata(2, :);
            amp = x - xtraces(ii);
            amp = amp * scale_rate;
            x = xtraces(ii) + amp;
            curve = plot(ax, x, y, '-', 'Color', color_, 'LineWidth', 0.5, 'DisplayName', name);
            % only show legend for the first trace
            if ii ~= 1
                set(get(get(curve,'Annotation'),'LegendInformation'),'IconDisplayStyle','off');
            end
        end
    end

    % clear axes
    cla(gui.viewAxes);
    hold(gui.viewAxes, 'on');

    % plot raygroups
    scaleby = fun_get_max_amplitude(gui.scaleEdit.String);
    for ii = 1:length(raygroups)
        color_ = 'k';
        if enable_color
            idx = mod(ii, length(colors));
            if idx == 0, idx = len(colors); end
            color_ = colors{idx};
        end
        idx = find(cellfun(@(s)strcmp(s, raygroups{ii}), obj.labels), 1);
        plot_raygroup(gui.viewAxes, obj.data{idx}, obj.xtraces{idx}, scaleby, raygroups{ii}, color_);
    end
    legend(gui.viewAxes, 'Location', 'northeast');
end

%% -----------------------------------------------------------------------------
function [] = on_expand_all(src, event)
% on_expand_all: expand all nodes of checkboxTree
    nodes = gui.checkboxTree.Root.Children;
    for ii = 1:length(nodes)
        gui.checkboxTree.expandNode(nodes(ii));
    end
end

%% -----------------------------------------------------------------------------
function [] = on_collapse_all(src, event)
% on_collapse_all: collapse all nodes of checkboxTree
    nodes = gui.checkboxTree.Root.Children;
    for ii = 1:length(nodes)
        gui.checkboxTree.collapseNode(nodes(ii));
    end
end

%% -----------------------------------------------------------------------------
function [] = on_mouse_clicked(src, event)
% on_mouse_clicked: when mouse clicked. check if its single-click or double-click
    persistent chk
    if isempty(chk)
        chk = 1;
        pause(0.2); %Add a delay to distinguish single click from a double click
        if chk == 1
            chk = [];
            gui.clickType = 'single';
        end
    else
        chk = [];
        gui.clickType = 'double';
    end
end

%% -----------------------------------------------------------------------------
function [] = on_select_changed(src, event)
% on_node_select: when any tree node is selected
    % if isempty(gui.checkboxTree.SelectedNodes) return; end
    % if isempty(gui.checkboxTree.SelectedNodes(1).UserData) return; end
    % gui.scaleEdit.String = gui.checkboxTree.SelectedNodes(1).UserData;

    fprintf('Selection Type: %s\n', src.SelectionType);
    if ~isempty(event.Nodes)
        node = event.Nodes(1);
        gui.scaleEdit.String = node.UserData;
        pause(0.2);
        if strcmp(gui.clickType, 'single'), return; end
        % when double click, fast plot the selected raygroup
        raygroups = fun_get_end_nodes(node);
        fun_plot_raygroups(raygroups);
    end
end

%% -----------------------------------------------------------------------------
function [] = on_enable_color(src, event)
% on_enable_color: enable color
    enable_color = true;
end

%% -----------------------------------------------------------------------------
function [] = on_disable_color(src, event)
% on_enable_color: disable color
    enable_color = false;
end

%% -----------------------------------------------------------------------------
function [] = on_apply(src, event)
% on_apply: on apply button clicked
    redraw(gui, obj);
end

function [] = on_readme(src, event)
% on_readme: show readme
    !start gui_pltsyn_readme.txt
end

%% -----------------------------------------------------------------------------
function [] = on_export_plot(src, event)
% on_export_plot: export axes to a new figure
    if ~isfield(gui, 'exportWindow') || ~ishandle(gui.exportWindow)
        gui.exportWindow = figure();
    else
        figure(gui.exportWindow);
    end
    newAxes = copyobj(gui.viewAxes, gui.exportWindow);
    % The original position is copied too, so adjust it.
    set(newAxes, 'Units', 'normalized', 'Position', get(groot, 'DefaultAxesPosition'));
end

%% -----------------------------------------------------------------------------
function [scaleby] = fun_get_max_amplitude(raygroup)
% fun_get_max_amplitude: get the max amplitude of specific raygroup(s)
    scaleby = 0;
    idx = find(cellfun(@(lb)startsWith(lb, raygroup), obj.labels));
    xtraces = obj.xtraces(idx);
    data = obj.data(idx);
    for ii = 1:length(xtraces)
        for jj = 1:length(xtraces{ii})
            xydata = data{ii}{jj};
            xtrace = xtraces{ii}(jj);
            max_amp = max(abs(xydata(1, :) - xtrace));
            scaleby = max(scaleby, max_amp);
        end
    end
end

%% -----------------------------------------------------------------------------
end
